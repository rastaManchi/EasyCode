from aiogram import types, Dispatcher, Bot
import aiogram.dispatcher.filters as filters
from aiogram.utils import executor
import random
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage


bot = Bot(token='7688359670:AAEf_gRt00OOD0Zil38X3LALoYE-F5ZupOA',parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())
gameboard=types.ReplyKeyboardMarkup(one_time_keyboard=True)
gameboard.add("–∫–∞–∫ –≤—ã–ª–∏—á–∏—Ç—å –∑–∞–¥–Ω–∏—Ü—É")
gameboard.add("–∑–∞–∫–∞–∑–∞—Ç—å –≤–æ–¥—É")

class A7(StatesGroup):
    volume = State()
    gus = State()
    adress = State()

@dp.message_handler(commands="start")
async def welcome(message):
    await message.answer('—Å—ã–≥—Ä–∞–µ–º –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É..',reply_markup=gameboard)

@dp.message_handler(commands="roll")
async def roll(message):
    text=message.text
    number1=text.split(" ")[1]
    number2=text.split(" ")[2]
    dice=random.randint(int(number1),int(number2))
    await message.answer('–∫—Ä—É—Ç–∏—Ç—Å—è –±–∞—Ä–∞–±–∞–Ω')
    await message.answer(f'–≤—ã–ø–∞–ª–æ:{dice}')

@dp.message_handler(commands="shoot")
async def shoot(message):
    await message.answer('–≤—ã—Å—Ç—Ä–µ–ª')
    bullet = random.randint(1, 6)
    userluck = random.randint(1, 6)
    if bullet == userluck:
        await message.answer('–≤—ã –∑–¥–æ—Ö–ª–∏')
    else:
        await message.answer('–≤—ã –≤—ã–∂–∏–ª–∏ —Ä–∞–¥—É–π—Ç–µ—Å—å –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ...')

async def nthn4trtghj4(message,state):
    if message.text == "–∑–∞–∫–∞–∑–∞—Ç—å –≤–æ–¥—É":
        await message.answer("—Ç–æ—á–Ω–æ –≤–æ–¥—É a —Ç–æ –≤–∞–º –≤—Å–µ 30")
        await message.answer("—Å–∫–æ–ª—å–∫–æ –ª–∏—Ç—Ä–æ–≤")

        await A7.volume.set()

async def volume(message,state):
    text = message.text
    await state.update_data(volume=message.text)
    await message.answer("–≥–∞–∑–∏—Ä–æ–≤–∞–Ω–∞—è?")
    await A7.gus.set()
async def gus(message,state):
    gas = message.text
    await message.answer("–∫—É–ª–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å")
    await A7.adress.set()
async def adress(message,state):
    address = message.text
    await message.answer("–∫—É–ª–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å")
    await state.finish()
    
@dp.message_handler(filters.Text(equals="–∫–∞–∫ –≤—ã–ª–∏—á–∏—Ç—å –∑–∞–¥–Ω–∏—Ü—É",ignore_case=True))
async def gvghnchvg(message):
    await message.answer('<b>üí©–±–æ—è—Ä–µ—à–Ω–µ —Ñ–æ—Ä—Ç–µ —ç–≤–∞–ª–∞—Ä –Ω–∞–¥—ë–∂–Ω—ã–π –¥—É–≥ –≤–∞—à–µ–π –∑–∞–¥–Ω–∏—Ü—ã —É—Å–∏–ª–∏–Ω—ã–π –∫–∞–ª–ª–∏–π –∏ –º–∞–≥–Ω–∏–π –æ–Ω –Ω–∞–¥–æ–ª–≥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –∑–¥–æ—Ä–æ–≤—å–µ –≤–∞—à–µ–π –∑–∞–¥–Ω–∏—Ü—ã, –±–æ—è—Ä–µ—à–Ω–µ —ç–≤–∞–ª–∞—Ä –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –°–ï–†–¨—ë–ó–ù–û–ì–û –ü–û–ù–û–°–êüí© </b>')

def water(dp: Dispatcher):
    dp.register_message_handler(nthn4trtghj4)
    dp.register_message_handler(volume,state = A7.volume)
    dp.register_message_handler(gus,state = A7.gus)
    dp.register_message_handler(adress,state = A7.adress)
water(dp)

executor.start_polling(dp, skip_updates=True)